-- hds header_start
--
-- VHDL Entity AES_Sound_1.Round_constant_ctrl.symbol
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:20 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY Round_constant_ctrl IS
   PORT( 
      En    : IN     std_logic;
      clk   : IN     std_logic;
      rst   : IN     std_logic;
      R_Con : OUT    std_logic_vector (0 TO 7)
   );

-- Declarations

END Round_constant_ctrl ;

-- hds interface_end
--
-- VHDL Architecture AES_Sound_1.Round_constant_ctrl.fsm
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:20 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF Round_constant_ctrl IS

   -- Architecture Declarations
   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      clk,
      rst
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         -- Reset Values
      ELSIF (rising_edge(clk)) THEN
         current_state <= next_state;
         -- Default Assignment To Internals

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      En,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s0 =>
         IF (En = '1') THEN
            next_state <= s1;
         ELSE
            next_state <= s0;
         END IF;
      WHEN s1 =>
         IF (En = '1') THEN
            next_state <= s2;
         ELSE
            next_state <= s1;
         END IF;
      WHEN s2 =>
         IF (En = '1') THEN
            next_state <= s3;
         ELSE
            next_state <= s2;
         END IF;
      WHEN s3 =>
         IF (En = '1') THEN
            next_state <= s4;
         ELSE
            next_state <= s3;
         END IF;
      WHEN s4 =>
         IF (En = '1') THEN
            next_state <= s8;
         ELSE
            next_state <= s4;
         END IF;
      WHEN s5 =>
         IF (En = '1') THEN
            next_state <= s6;
         ELSE
            next_state <= s5;
         END IF;
      WHEN s6 =>
         IF (En = '1') THEN
            next_state <= s7;
         ELSE
            next_state <= s6;
         END IF;
      WHEN s7 =>
         IF (En = '1') THEN
            next_state <= s9;
         ELSE
            next_state <= s7;
         END IF;
      WHEN s8 =>
         IF (En = '1') THEN
            next_state <= s5;
         ELSE
            next_state <= s8;
         END IF;
      WHEN s9 =>
         IF (En = '1') THEN
            next_state <= s10;
         ELSE
            next_state <= s9;
         END IF;
      WHEN s10 =>
         IF (En = '1') THEN
            next_state <= s1;
         ELSE
            next_state <= s10;
         END IF;
      WHEN OTHERS =>
         next_state <= s0;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      R_Con <= "00000001";
      -- Default Assignment To Internals

      -- Combined Actions
      CASE current_state IS
      WHEN s1 =>
         R_Con <="00000001";
      WHEN s2 =>
         R_Con <="00000010";
      WHEN s3 =>
         R_Con <="00000100";
      WHEN s4 =>
         R_Con <="00001000";
      WHEN s5 =>
         R_Con <="00100000";
      WHEN s6 =>
         R_Con <="01000000";
      WHEN s7 =>
         R_Con <="10000000";
      WHEN s8 =>
         R_Con <="00010000";
      WHEN s9 =>
         R_Con <="00011011";
      WHEN s10 =>
         R_Con <="00110110";
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
