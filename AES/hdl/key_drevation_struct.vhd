-- hds header_start
--
-- VHDL Entity AES_Sound_1.key_Drevation.symbol
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:21 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY key_Drevation IS
   PORT( 
      Dec_Address : IN     std_logic_vector (0 TO 3);
      En_Seed_Key : IN     std_logic;
      Enc_Address : IN     std_logic_vector (0 TO 3);
      Seed        : IN     std_logic_vector (0 TO 127);
      clk         : IN     std_logic;
      rst         : IN     std_logic;
      Key_out     : OUT    std_logic_vector (0 TO 127);
      Last_Key    : OUT    std_logic_vector (0 TO 127);
      finish      : OUT    std_logic;
      int_Seed    : OUT    std_logic_vector (0 TO 127);
      inv_Key_out : OUT    std_logic_vector (0 TO 127)
   );

-- Declarations

END key_Drevation ;

-- hds interface_end
--
-- VHDL Architecture AES_Sound_1.key_Drevation.struct
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:22 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.ALL;

ARCHITECTURE struct OF key_Drevation IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL En_rcon               : std_logic;
   SIGNAL Key_of_i              : std_logic_vector(0 TO 127);
   SIGNAL Sel_FB_Or_Inputrndkey : std_logic;
   SIGNAL Switch                : std_logic;
   SIGNAL cnt_add               : std_logic_vector(0 TO 3);
   SIGNAL d_out                 : std_logic_vector(0 TO 127);
   SIGNAL int_cnt               : std_logic;
   SIGNAL inv_cnt_add           : std_logic_vector(0 TO 3);
   SIGNAL out0                  : std_logic_vector(0 TO 3);
   SIGNAL out1                  : std_logic_vector(0 TO 3);
   SIGNAL w1_en                 : std_logic;
   SIGNAL w2_en                 : std_logic;
   SIGNAL w3_en                 : std_logic;
   SIGNAL w4_en                 : std_logic;
   SIGNAL w_en                  : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL finish_internal   : std_logic;
   SIGNAL int_Seed_internal : std_logic_vector (0 TO 127);


   -- Component Declarations
   COMPONENT Dwn_Cnt10
   PORT (
      clk     : IN     std_logic ;
      en      : IN     std_logic ;
      start   : IN     std_logic ;
      cnt_add : OUT    std_logic_vector (0 TO 3)
   );
   END COMPONENT;
   COMPONENT Key_Rnd
   PORT (
      En_rcon : IN     std_logic ;
      Key_w1  : IN     std_logic_vector (0 TO 31);
      Key_w2  : IN     std_logic_vector (0 TO 31);
      Key_w3  : IN     std_logic_vector (0 TO 31);
      Key_w4  : IN     std_logic_vector (0 TO 31);
      clk     : IN     std_logic ;
      rst     : IN     std_logic ;
      s_w1    : IN     std_logic ;
      s_w2    : IN     std_logic ;
      s_w3    : IN     std_logic ;
      s_w4    : IN     std_logic ;
      w1_en   : IN     std_logic ;
      w2_en   : IN     std_logic ;
      w3_en   : IN     std_logic ;
      w4_en   : IN     std_logic ;
      W1_out  : OUT    std_logic_vector (0 TO 31);
      W2_out  : OUT    std_logic_vector (0 TO 31);
      W3_out  : OUT    std_logic_vector (0 TO 31);
      W4_out  : OUT    std_logic_vector (0 TO 31)
   );
   END COMPONENT;
   COMPONENT Mux2_1
   PORT (
      in0  : IN     std_logic_vector (0 TO 127);
      in1  : IN     std_logic_vector (0 TO 127);
      sel  : IN     std_logic ;
      out0 : OUT    std_logic_vector (0 TO 127)
   );
   END COMPONENT;
   COMPONENT Mux_add
   PORT (
      in0  : IN     std_logic_vector (0 TO 3);
      in1  : IN     std_logic_vector (0 TO 3);
      sel  : IN     std_logic ;
      out0 : OUT    std_logic_vector (0 TO 3)
   );
   END COMPONENT;
   COMPONENT cnt10
   PORT (
      clk     : IN     std_logic ;
      en      : IN     std_logic ;
      start   : IN     std_logic ;
      cnt_add : OUT    std_logic_vector (0 TO 3)
   );
   END COMPONENT;
   COMPONENT key_Ram
   PORT (
      add      : IN     std_logic_vector (0 TO 3);
      clk      : IN     std_logic ;
      data_in  : IN     std_logic_vector (0 TO 127);
      w_en     : IN     std_logic ;
      data_out : OUT    std_logic_vector (0 TO 127)
   );
   END COMPONENT;
   COMPONENT key_controller
   PORT (
      Clk                   : IN     std_logic ;
      En                    : IN     std_logic ;
      add                   : IN     std_logic_vector (0 TO 3);
      rst                   : IN     std_logic ;
      En_Rcon               : OUT    std_logic ;
      Sel_FB_Or_Inputrndkey : OUT    std_logic ;
      Switch                : OUT    std_logic ;
      W_en                  : OUT    std_logic ;
      W_en1                 : OUT    std_logic ;
      W_en2                 : OUT    std_logic ;
      W_en3                 : OUT    std_logic ;
      W_en4                 : OUT    std_logic ;
      finish                : OUT    std_logic ;
      int_cnt               : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT reg_128bit
   PORT (
      clk   : IN     std_logic ;
      d_in  : IN     std_logic_vector (0 TO 127);
      en    : IN     std_logic ;
      rst   : IN     std_logic ;
      d_out : OUT    std_logic_vector (0 TO 127)
   );
   END COMPONENT;



BEGIN
   -- Instance port mappings.
   I16 : Dwn_Cnt10
      PORT MAP (
         clk     => clk,
         en      => int_cnt,
         start   => En_Seed_Key,
         cnt_add => inv_cnt_add
      );
   I1 : Key_Rnd
      PORT MAP (
         En_rcon => En_rcon,
         Key_w1  => d_out(0 TO 31),
         Key_w2  => d_out(32 TO 63),
         Key_w3  => d_out(64 TO 95),
         Key_w4  => d_out(96 TO 127),
         clk     => clk,
         rst     => rst,
         s_w1    => Switch,
         s_w2    => Switch,
         s_w3    => Switch,
         s_w4    => Switch,
         w1_en   => w1_en,
         w2_en   => w2_en,
         w3_en   => w3_en,
         w4_en   => w4_en,
         W1_out  => Key_of_i(0 TO 31),
         W2_out  => Key_of_i(32 TO 63),
         W3_out  => Key_of_i(64 TO 95),
         W4_out  => Key_of_i(96 TO 127)
      );
   I2 : Mux2_1
      PORT MAP (
         in0  => int_Seed_internal,
         in1  => Key_of_i,
         sel  => Sel_FB_Or_Inputrndkey,
         out0 => d_out
      );
   I0 : Mux_add
      PORT MAP (
         in0  => Dec_Address,
         in1  => inv_cnt_add,
         sel  => finish_internal,
         out0 => out0
      );
   I3 : Mux_add
      PORT MAP (
         in0  => Enc_Address,
         in1  => cnt_add,
         sel  => finish_internal,
         out0 => out1
      );
   I6 : cnt10
      PORT MAP (
         clk     => clk,
         en      => int_cnt,
         start   => En_Seed_Key,
         cnt_add => cnt_add
      );
   I9 : key_Ram
      PORT MAP (
         add      => out0,
         clk      => clk,
         data_in  => d_out,
         w_en     => w_en,
         data_out => inv_Key_out
      );
   I14 : key_Ram
      PORT MAP (
         add      => out1,
         clk      => clk,
         data_in  => d_out,
         w_en     => w_en,
         data_out => Key_out
      );
   I8 : key_controller
      PORT MAP (
         Clk                   => clk,
         En                    => En_Seed_Key,
         add                   => cnt_add,
         rst                   => rst,
         En_Rcon               => En_rcon,
         Sel_FB_Or_Inputrndkey => Sel_FB_Or_Inputrndkey,
         Switch                => Switch,
         W_en                  => w_en,
         W_en1                 => w1_en,
         W_en2                 => w2_en,
         W_en3                 => w3_en,
         W_en4                 => w4_en,
         finish                => finish_internal,
         int_cnt               => int_cnt
      );
   I12 : reg_128bit
      PORT MAP (
         clk   => clk,
         d_in  => d_out,
         en    => finish_internal,
         rst   => rst,
         d_out => Last_Key
      );
   I13 : reg_128bit
      PORT MAP (
         clk   => clk,
         d_in  => Seed,
         en    => En_Seed_Key,
         rst   => rst,
         d_out => int_Seed_internal
      );

   -- Implicit buffered output assignments
   finish   <= finish_internal;
   int_Seed <= int_Seed_internal;

END struct;
