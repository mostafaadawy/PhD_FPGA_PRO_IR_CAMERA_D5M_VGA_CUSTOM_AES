-- hds header_start
--
-- VHDL Entity AES_Sound_1.Rnd.symbol
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:18 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY Rnd IS
   PORT( 
      Key       : IN     std_logic_vector (0 TO 127);
      Mult      : IN     std_logic_vector (0 TO 31);
      RND_Input : IN     std_logic_vector (0 TO 127);
      Sel       : IN     std_logic_vector (0 TO 63);
      clk       : IN     std_logic;
      RND_OUT   : OUT    std_logic_vector (0 TO 127)
   );

-- Declarations

END Rnd ;

-- hds interface_end
--
-- VHDL Architecture AES_Sound_1.Rnd.struct
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:19 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF Rnd IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Sub_in1    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in10   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in11   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in12   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in13   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in14   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in15   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in16   : std_logic_vector(0 TO 7);
   SIGNAL Sub_in2    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in3    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in4    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in5    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in6    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in7    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in8    : std_logic_vector(0 TO 7);
   SIGNAL Sub_in9    : std_logic_vector(0 TO 7);
   SIGNAL Sub_out1   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out10  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out11  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out12  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out13  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out14  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out15  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out16  : std_logic_vector(0 TO 7);
   SIGNAL Sub_out2   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out3   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out4   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out5   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out6   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out7   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out8   : std_logic_vector(0 TO 7);
   SIGNAL Sub_out9   : std_logic_vector(0 TO 7);
   SIGNAL word_out1  : std_logic_vector(0 TO 7);
   SIGNAL word_out10 : std_logic_vector(0 TO 7);
   SIGNAL word_out11 : std_logic_vector(0 TO 7);
   SIGNAL word_out12 : std_logic_vector(0 TO 7);
   SIGNAL word_out13 : std_logic_vector(0 TO 7);
   SIGNAL word_out14 : std_logic_vector(0 TO 7);
   SIGNAL word_out15 : std_logic_vector(0 TO 7);
   SIGNAL word_out16 : std_logic_vector(0 TO 7);
   SIGNAL word_out2  : std_logic_vector(0 TO 7);
   SIGNAL word_out3  : std_logic_vector(0 TO 7);
   SIGNAL word_out4  : std_logic_vector(0 TO 7);
   SIGNAL word_out5  : std_logic_vector(0 TO 7);
   SIGNAL word_out6  : std_logic_vector(0 TO 7);
   SIGNAL word_out7  : std_logic_vector(0 TO 7);
   SIGNAL word_out8  : std_logic_vector(0 TO 7);
   SIGNAL word_out9  : std_logic_vector(0 TO 7);


   -- Component Declarations
   COMPONENT SH_Inv_SH
   PORT (
      in1         : IN     std_logic_vector (0 TO 7);
      in10        : IN     std_logic_vector (0 TO 7);
      in11        : IN     std_logic_vector (0 TO 7);
      in12        : IN     std_logic_vector (0 TO 7);
      in13        : IN     std_logic_vector (0 TO 7);
      in14        : IN     std_logic_vector (0 TO 7);
      in15        : IN     std_logic_vector (0 TO 7);
      in16        : IN     std_logic_vector (0 TO 7);
      in2         : IN     std_logic_vector (0 TO 7);
      in3         : IN     std_logic_vector (0 TO 7);
      in4         : IN     std_logic_vector (0 TO 7);
      in5         : IN     std_logic_vector (0 TO 7);
      in6         : IN     std_logic_vector (0 TO 7);
      in7         : IN     std_logic_vector (0 TO 7);
      in8         : IN     std_logic_vector (0 TO 7);
      in9         : IN     std_logic_vector (0 TO 7);
      sel1        : IN     std_logic_vector (0 TO 3);
      sel10       : IN     std_logic_vector (0 TO 3);
      sel11       : IN     std_logic_vector (0 TO 3);
      sel12       : IN     std_logic_vector (0 TO 3);
      sel13       : IN     std_logic_vector (0 TO 3);
      sel14       : IN     std_logic_vector (0 TO 3);
      sel15       : IN     std_logic_vector (0 TO 3);
      sel16       : IN     std_logic_vector (0 TO 3);
      sel2        : IN     std_logic_vector (0 TO 3);
      sel3        : IN     std_logic_vector (0 TO 3);
      sel4        : IN     std_logic_vector (0 TO 3);
      sel5        : IN     std_logic_vector (0 TO 3);
      sel6        : IN     std_logic_vector (0 TO 3);
      sel7        : IN     std_logic_vector (0 TO 3);
      sel8        : IN     std_logic_vector (0 TO 3);
      sel9        : IN     std_logic_vector (0 TO 3);
      shift_out10 : OUT    std_logic_vector (0 TO 7);
      shift_out11 : OUT    std_logic_vector (0 TO 7);
      shift_out12 : OUT    std_logic_vector (0 TO 7);
      shift_out13 : OUT    std_logic_vector (0 TO 7);
      shift_out14 : OUT    std_logic_vector (0 TO 7);
      shift_out15 : OUT    std_logic_vector (0 TO 7);
      shift_out16 : OUT    std_logic_vector (0 TO 7);
      shift_out7  : OUT    std_logic_vector (0 TO 7);
      shift_out8  : OUT    std_logic_vector (0 TO 7);
      shift_out9  : OUT    std_logic_vector (0 TO 7);
      shit_out1   : OUT    std_logic_vector (0 TO 7);
      shit_out2   : OUT    std_logic_vector (0 TO 7);
      shit_out3   : OUT    std_logic_vector (0 TO 7);
      shit_out4   : OUT    std_logic_vector (0 TO 7);
      shit_out5   : OUT    std_logic_vector (0 TO 7);
      shit_out6   : OUT    std_logic_vector (0 TO 7)
   );
   END COMPONENT;
   COMPONENT Subtituation
   PORT (
      Sub_in1   : IN     std_logic_vector (0 TO 7);
      Sub_in10  : IN     std_logic_vector (0 TO 7);
      Sub_in11  : IN     std_logic_vector (0 TO 7);
      Sub_in12  : IN     std_logic_vector (0 TO 7);
      Sub_in13  : IN     std_logic_vector (0 TO 7);
      Sub_in14  : IN     std_logic_vector (0 TO 7);
      Sub_in15  : IN     std_logic_vector (0 TO 7);
      Sub_in16  : IN     std_logic_vector (0 TO 7);
      Sub_in2   : IN     std_logic_vector (0 TO 7);
      Sub_in3   : IN     std_logic_vector (0 TO 7);
      Sub_in4   : IN     std_logic_vector (0 TO 7);
      Sub_in5   : IN     std_logic_vector (0 TO 7);
      Sub_in6   : IN     std_logic_vector (0 TO 7);
      Sub_in7   : IN     std_logic_vector (0 TO 7);
      Sub_in8   : IN     std_logic_vector (0 TO 7);
      Sub_in9   : IN     std_logic_vector (0 TO 7);
      clk       : IN     std_logic ;
      Sub_out1  : OUT    std_logic_vector (0 TO 7);
      Sub_out10 : OUT    std_logic_vector (0 TO 7);
      Sub_out11 : OUT    std_logic_vector (0 TO 7);
      Sub_out12 : OUT    std_logic_vector (0 TO 7);
      Sub_out13 : OUT    std_logic_vector (0 TO 7);
      Sub_out14 : OUT    std_logic_vector (0 TO 7);
      Sub_out15 : OUT    std_logic_vector (0 TO 7);
      Sub_out16 : OUT    std_logic_vector (0 TO 7);
      Sub_out2  : OUT    std_logic_vector (0 TO 7);
      Sub_out3  : OUT    std_logic_vector (0 TO 7);
      Sub_out4  : OUT    std_logic_vector (0 TO 7);
      Sub_out5  : OUT    std_logic_vector (0 TO 7);
      Sub_out6  : OUT    std_logic_vector (0 TO 7);
      Sub_out7  : OUT    std_logic_vector (0 TO 7);
      Sub_out8  : OUT    std_logic_vector (0 TO 7);
      Sub_out9  : OUT    std_logic_vector (0 TO 7)
   );
   END COMPONENT;
   COMPONENT Top_MIxCol
   PORT (
      Data1      : IN     std_logic_vector (0 TO 7);
      Data10     : IN     std_logic_vector (0 TO 7);
      Data11     : IN     std_logic_vector (0 TO 7);
      Data12     : IN     std_logic_vector (0 TO 7);
      Data13     : IN     std_logic_vector (0 TO 7);
      Data14     : IN     std_logic_vector (0 TO 7);
      Data15     : IN     std_logic_vector (0 TO 7);
      Data16     : IN     std_logic_vector (0 TO 7);
      Data2      : IN     std_logic_vector (0 TO 7);
      Data3      : IN     std_logic_vector (0 TO 7);
      Data4      : IN     std_logic_vector (0 TO 7);
      Data5      : IN     std_logic_vector (0 TO 7);
      Data6      : IN     std_logic_vector (0 TO 7);
      Data7      : IN     std_logic_vector (0 TO 7);
      Data8      : IN     std_logic_vector (0 TO 7);
      Data9      : IN     std_logic_vector (0 TO 7);
      Mult1      : IN     std_logic_vector (0 TO 7);
      Mult2      : IN     std_logic_vector (0 TO 7);
      Mult3      : IN     std_logic_vector (0 TO 7);
      Mult4      : IN     std_logic_vector (0 TO 7);
      word_out1  : OUT    std_logic_vector (0 TO 7);
      word_out10 : OUT    std_logic_vector (0 TO 7);
      word_out11 : OUT    std_logic_vector (0 TO 7);
      word_out12 : OUT    std_logic_vector (0 TO 7);
      word_out13 : OUT    std_logic_vector (0 TO 7);
      word_out14 : OUT    std_logic_vector (0 TO 7);
      word_out15 : OUT    std_logic_vector (0 TO 7);
      word_out16 : OUT    std_logic_vector (0 TO 7);
      word_out2  : OUT    std_logic_vector (0 TO 7);
      word_out3  : OUT    std_logic_vector (0 TO 7);
      word_out4  : OUT    std_logic_vector (0 TO 7);
      word_out5  : OUT    std_logic_vector (0 TO 7);
      word_out6  : OUT    std_logic_vector (0 TO 7);
      word_out7  : OUT    std_logic_vector (0 TO 7);
      word_out8  : OUT    std_logic_vector (0 TO 7);
      word_out9  : OUT    std_logic_vector (0 TO 7)
   );
   END COMPONENT;
   COMPONENT xor_byte
   PORT (
      in0  : IN     std_logic_vector (0 TO 7);
      in1  : IN     std_logic_vector (0 TO 7);
      out0 : OUT    std_logic_vector (0 TO 7)
   );
   END COMPONENT;


BEGIN
   -- Instance port mappings.
   I1 : SH_Inv_SH
      PORT MAP (
         in1         => RND_Input(0 TO 7),
         in10        => RND_Input(72 TO 79),
         in11        => RND_Input(80 TO 87),
         in12        => RND_Input(88 TO 95),
         in13        => RND_Input(96 TO 103),
         in14        => RND_Input(104 TO 111),
         in15        => RND_Input(112 TO 119),
         in16        => RND_Input(120 TO 127),
         in2         => RND_Input(8 TO 15),
         in3         => RND_Input(16 TO 23),
         in4         => RND_Input(24 TO 31),
         in5         => RND_Input(32 TO 39),
         in6         => RND_Input(40 TO 47),
         in7         => RND_Input(48 TO 55),
         in8         => RND_Input(56 TO 63),
         in9         => RND_Input(64 TO 71),
         sel1        => Sel(0 TO 3),
         sel10       => Sel(36 TO 39),
         sel11       => Sel(40 TO 43),
         sel12       => Sel(44 TO 47),
         sel13       => Sel(48 TO 51),
         sel14       => Sel(52 TO 55),
         sel15       => Sel(56 TO 59),
         sel16       => Sel(60 TO 63),
         sel2        => Sel(4 TO 7),
         sel3        => Sel(8 TO 11),
         sel4        => Sel(12 TO 15),
         sel5        => Sel(16 TO 19),
         sel6        => Sel(20 TO 23),
         sel7        => Sel(24 TO 27),
         sel8        => Sel(28 TO 31),
         sel9        => Sel(32 TO 35),
         shift_out10 => Sub_in10,
         shift_out11 => Sub_in11,
         shift_out12 => Sub_in12,
         shift_out13 => Sub_in13,
         shift_out14 => Sub_in14,
         shift_out15 => Sub_in15,
         shift_out16 => Sub_in16,
         shift_out7  => Sub_in7,
         shift_out8  => Sub_in8,
         shift_out9  => Sub_in9,
         shit_out1   => Sub_in1,
         shit_out2   => Sub_in2,
         shit_out3   => Sub_in3,
         shit_out4   => Sub_in4,
         shit_out5   => Sub_in5,
         shit_out6   => Sub_in6
      );
   I0 : Subtituation
      PORT MAP (
         Sub_in1   => Sub_in1,
         Sub_in10  => Sub_in10,
         Sub_in11  => Sub_in11,
         Sub_in12  => Sub_in12,
         Sub_in13  => Sub_in13,
         Sub_in14  => Sub_in14,
         Sub_in15  => Sub_in15,
         Sub_in16  => Sub_in16,
         Sub_in2   => Sub_in2,
         Sub_in3   => Sub_in3,
         Sub_in4   => Sub_in4,
         Sub_in5   => Sub_in5,
         Sub_in6   => Sub_in6,
         Sub_in7   => Sub_in7,
         Sub_in8   => Sub_in8,
         Sub_in9   => Sub_in9,
         clk       => clk,
         Sub_out1  => Sub_out1,
         Sub_out10 => Sub_out10,
         Sub_out11 => Sub_out11,
         Sub_out12 => Sub_out12,
         Sub_out13 => Sub_out13,
         Sub_out14 => Sub_out14,
         Sub_out15 => Sub_out15,
         Sub_out16 => Sub_out16,
         Sub_out2  => Sub_out2,
         Sub_out3  => Sub_out3,
         Sub_out4  => Sub_out4,
         Sub_out5  => Sub_out5,
         Sub_out6  => Sub_out6,
         Sub_out7  => Sub_out7,
         Sub_out8  => Sub_out8,
         Sub_out9  => Sub_out9
      );
   I2 : Top_MIxCol
      PORT MAP (
         Data1      => Sub_out1,
         Data10     => Sub_out10,
         Data11     => Sub_out11,
         Data12     => Sub_out12,
         Data13     => Sub_out13,
         Data14     => Sub_out14,
         Data15     => Sub_out15,
         Data16     => Sub_out16,
         Data2      => Sub_out2,
         Data3      => Sub_out3,
         Data4      => Sub_out4,
         Data5      => Sub_out5,
         Data6      => Sub_out6,
         Data7      => Sub_out7,
         Data8      => Sub_out8,
         Data9      => Sub_out9,
         Mult1      => Mult(0 TO 7),
         Mult2      => Mult(8 TO 15),
         Mult3      => Mult(16 TO 23),
         Mult4      => Mult(24 TO 31),
         word_out1  => word_out1,
         word_out10 => word_out10,
         word_out11 => word_out11,
         word_out12 => word_out12,
         word_out13 => word_out13,
         word_out14 => word_out14,
         word_out15 => word_out15,
         word_out16 => word_out16,
         word_out2  => word_out2,
         word_out3  => word_out3,
         word_out4  => word_out4,
         word_out5  => word_out5,
         word_out6  => word_out6,
         word_out7  => word_out7,
         word_out8  => word_out8,
         word_out9  => word_out9
      );
   I18 : xor_byte
      PORT MAP (
         in0  => word_out16,
         in1  => Key(120 TO 127),
         out0 => RND_OUT(120 TO 127)
      );
   I17 : xor_byte
      PORT MAP (
         in0  => word_out15,
         in1  => Key(112 TO 119),
         out0 => RND_OUT(112 TO 119)
      );
   I16 : xor_byte
      PORT MAP (
         in0  => word_out14,
         in1  => Key(104 TO 111),
         out0 => RND_OUT(104 TO 111)
      );
   I15 : xor_byte
      PORT MAP (
         in0  => word_out13,
         in1  => Key(96 TO 103),
         out0 => RND_OUT(96 TO 103)
      );
   I14 : xor_byte
      PORT MAP (
         in0  => word_out12,
         in1  => Key(88 TO 95),
         out0 => RND_OUT(88 TO 95)
      );
   I13 : xor_byte
      PORT MAP (
         in0  => word_out11,
         in1  => Key(80 TO 87),
         out0 => RND_OUT(80 TO 87)
      );
   I12 : xor_byte
      PORT MAP (
         in0  => word_out10,
         in1  => Key(72 TO 79),
         out0 => RND_OUT(72 TO 79)
      );
   I11 : xor_byte
      PORT MAP (
         in0  => word_out9,
         in1  => Key(64 TO 71),
         out0 => RND_OUT(64 TO 71)
      );
   I10 : xor_byte
      PORT MAP (
         in0  => word_out8,
         in1  => Key(56 TO 63),
         out0 => RND_OUT(56 TO 63)
      );
   I9 : xor_byte
      PORT MAP (
         in0  => word_out7,
         in1  => Key(48 TO 55),
         out0 => RND_OUT(48 TO 55)
      );
   I8 : xor_byte
      PORT MAP (
         in0  => word_out6,
         in1  => Key(40 TO 47),
         out0 => RND_OUT(40 TO 47)
      );
   I7 : xor_byte
      PORT MAP (
         in0  => word_out5,
         in1  => Key(32 TO 39),
         out0 => RND_OUT(32 TO 39)
      );
   I6 : xor_byte
      PORT MAP (
         in0  => word_out4,
         in1  => Key(24 TO 31),
         out0 => RND_OUT(24 TO 31)
      );
   I5 : xor_byte
      PORT MAP (
         in0  => word_out3,
         in1  => Key(16 TO 23),
         out0 => RND_OUT(16 TO 23)
      );
   I4 : xor_byte
      PORT MAP (
         in0  => word_out2,
         in1  => Key(8 TO 15),
         out0 => RND_OUT(8 TO 15)
      );
   I3 : xor_byte
      PORT MAP (
         in0  => word_out1,
         in1  => Key(0 TO 7),
         out0 => RND_OUT(0 TO 7)
      );

END struct;
