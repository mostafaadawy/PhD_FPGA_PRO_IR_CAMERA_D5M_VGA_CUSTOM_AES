-- hds header_start
--
-- VHDL Entity AES_Sound_1.Key_Rnd.symbol
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:20 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY Key_Rnd IS
   PORT( 
      En_rcon : IN     std_logic;
      Key_w1  : IN     std_logic_vector (0 TO 31);
      Key_w2  : IN     std_logic_vector (0 TO 31);
      Key_w3  : IN     std_logic_vector (0 TO 31);
      Key_w4  : IN     std_logic_vector (0 TO 31);
      clk     : IN     std_logic;
      rst     : IN     std_logic;
      s_w1    : IN     std_logic;
      s_w2    : IN     std_logic;
      s_w3    : IN     std_logic;
      s_w4    : IN     std_logic;
      w1_en   : IN     std_logic;
      w2_en   : IN     std_logic;
      w3_en   : IN     std_logic;
      w4_en   : IN     std_logic;
      W1_out  : OUT    std_logic_vector (0 TO 31);
      W2_out  : OUT    std_logic_vector (0 TO 31);
      W3_out  : OUT    std_logic_vector (0 TO 31);
      W4_out  : OUT    std_logic_vector (0 TO 31)
   );

-- Declarations

END Key_Rnd ;

-- hds interface_end
--
-- VHDL Architecture AES_Sound_1.Key_Rnd.struct
--
-- Created:
--          by - Mostafa.UNKNOWN (MOSTAFA_PC)
--          at - 15:33:21 02/26/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.5 (Build 170)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ARCHITECTURE struct OF Key_Rnd IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Feed_back1 : std_logic_vector(0 TO 31);
   SIGNAL Feed_back2 : std_logic_vector(0 TO 31);
   SIGNAL Feed_back3 : std_logic_vector(0 TO 31);
   SIGNAL Feed_back4 : std_logic_vector(0 TO 31);
   SIGNAL out0       : std_logic_vector(0 TO 31);
   SIGNAL out1       : std_logic_vector(0 TO 31);
   SIGNAL out2       : std_logic_vector(0 TO 31);
   SIGNAL out3       : std_logic_vector(0 TO 31);
   SIGNAL rom_out    : std_logic_vector(0 TO 31);

   -- Implicit buffer signal declarations
   SIGNAL W1_out_internal : std_logic_vector (0 TO 31);
   SIGNAL W2_out_internal : std_logic_vector (0 TO 31);
   SIGNAL W3_out_internal : std_logic_vector (0 TO 31);
   SIGNAL W4_out_internal : std_logic_vector (0 TO 31);


   -- Component Declarations
   COMPONENT Key_Sbox_Rotat
   PORT (
      En_rcon  : IN     std_logic ;
      clk      : IN     std_logic ;
      rom_in1  : IN     std_logic_vector (0 TO 7);
      rom_in2  : IN     std_logic_vector (0 TO 7);
      rom_in3  : IN     std_logic_vector (0 TO 7);
      rom_in4  : IN     std_logic_vector (0 TO 7);
      rst      : IN     std_logic ;
      rom_out1 : OUT    std_logic_vector (0 TO 7);
      rom_out2 : OUT    std_logic_vector (0 TO 7);
      rom_out3 : OUT    std_logic_vector (0 TO 7);
      rom_out4 : OUT    std_logic_vector (0 TO 7)
   );
   END COMPONENT;
   COMPONENT Mux_32
   PORT (
      in0  : IN     std_logic_vector (0 TO 31);
      in1  : IN     std_logic_vector (0 TO 31);
      sel  : IN     std_logic ;
      out0 : OUT    std_logic_vector (0 TO 31)
   );
   END COMPONENT;
   COMPONENT REG_32
   PORT (
      clk  : IN     std_logic ;
      en   : IN     std_logic ;
      in0  : IN     std_logic_vector (0 TO 31);
      rst  : IN     std_logic ;
      out0 : OUT    std_logic_vector (0 TO 31)
   );
   END COMPONENT;
   COMPONENT Xor_32
   PORT (
      in0  : IN     std_logic_vector (0 TO 31);
      in1  : IN     std_logic_vector (0 TO 31);
      out0 : OUT    std_logic_vector (0 TO 31)
   );
   END COMPONENT;


BEGIN
   -- Instance port mappings.
   I0 : Key_Sbox_Rotat
      PORT MAP (
         En_rcon  => En_rcon,
         clk      => clk,
         rom_in1  => W4_out_internal(0 TO 7),
         rom_in2  => W4_out_internal(8 TO 15),
         rom_in3  => W4_out_internal(16 TO 23),
         rom_in4  => W4_out_internal(24 TO 31),
         rst      => rst,
         rom_out1 => rom_out(0 TO 7),
         rom_out2 => rom_out(8 TO 15),
         rom_out3 => rom_out(16 TO 23),
         rom_out4 => rom_out(24 TO 31)
      );
   I9 : Mux_32
      PORT MAP (
         in0  => Feed_back1,
         in1  => Key_w1,
         sel  => s_w1,
         out0 => out0
      );
   I10 : Mux_32
      PORT MAP (
         in0  => Feed_back2,
         in1  => Key_w2,
         sel  => s_w2,
         out0 => out1
      );
   I11 : Mux_32
      PORT MAP (
         in0  => Feed_back3,
         in1  => Key_w3,
         sel  => s_w3,
         out0 => out2
      );
   I12 : Mux_32
      PORT MAP (
         in0  => Feed_back4,
         in1  => Key_w4,
         sel  => s_w4,
         out0 => out3
      );
   I1 : REG_32
      PORT MAP (
         clk  => clk,
         en   => w1_en,
         in0  => out0,
         rst  => rst,
         out0 => W1_out_internal
      );
   I2 : REG_32
      PORT MAP (
         clk  => clk,
         en   => w2_en,
         in0  => out1,
         rst  => rst,
         out0 => W2_out_internal
      );
   I3 : REG_32
      PORT MAP (
         clk  => clk,
         en   => w3_en,
         in0  => out2,
         rst  => rst,
         out0 => W3_out_internal
      );
   I4 : REG_32
      PORT MAP (
         clk  => clk,
         en   => w4_en,
         in0  => out3,
         rst  => rst,
         out0 => W4_out_internal
      );
   I5 : Xor_32
      PORT MAP (
         in0  => W1_out_internal,
         in1  => rom_out,
         out0 => Feed_back1
      );
   I6 : Xor_32
      PORT MAP (
         in0  => W1_out_internal,
         in1  => W2_out_internal,
         out0 => Feed_back2
      );
   I7 : Xor_32
      PORT MAP (
         in0  => W2_out_internal,
         in1  => W3_out_internal,
         out0 => Feed_back3
      );
   I8 : Xor_32
      PORT MAP (
         in0  => W3_out_internal,
         in1  => W4_out_internal,
         out0 => Feed_back4
      );

   -- Implicit buffered output assignments
   W1_out <= W1_out_internal;
   W2_out <= W2_out_internal;
   W3_out <= W3_out_internal;
   W4_out <= W4_out_internal;

END struct;
